---
import { YOGA_GURUS_SECTION, YOGA_GURUS_STYLES } from '$constants/yogaGurusConstants';
import { TEACHERS_SECTION } from '$constants/HomePage/homePageConstants';
import SectionHeader from '$ui/SectionHeader.astro';
import HorizontalCarousel from '$ui/HorizontalCarousel.astro';
import SpiritualCard from '$ui/SpiritualCard.astro';

// Component Props Interface
export interface Props {
  teachersData?: typeof TEACHERS_SECTION;
  containerClass?: string;
  backgroundClass?: string;
}

const {
  teachersData,
  containerClass = YOGA_GURUS_STYLES.CONTAINER,
  backgroundClass = 'bg-yellow-50 px-4 py-16',
} = Astro.props;

// Use props data or fallback to existing constants
const data = teachersData || {
  TITLE: YOGA_GURUS_SECTION.TITLE,
  TEACHERS: YOGA_GURUS_SECTION.GURUS.map((guru, index) => ({
    id: guru.id || index + 1,
    name: guru.name,
    specialty: '',
    experience: '',
    image: guru.image,
    description: '',
  })),
};
---

<!-- Spiritual Yoga Gurus Section -->
<section class:list={[backgroundClass]}>
  <div class:list={[containerClass]}>
    <!-- Section Header -->
    <SectionHeader
      containerClass="text-center"
      svgHeight={20}
      svgWidth={200}
      title={data.TITLE}
      titleClass={YOGA_GURUS_STYLES.TITLE}
    />

    <!-- Teachers/Gurus - Horizontal scroll: 1 for mobile, 2 for tablet, 3 for desktop -->
    <HorizontalCarousel
      containerClass={YOGA_GURUS_STYLES.CARDS_CONTAINER}
      id="gurusContainer"
      scrollInterval={4000}
    >
      {
        data.TEACHERS.map(teacher => (
          <SpiritualCard
            description={'description' in teacher ? teacher.description : ''}
            experience={teacher.experience || ''}
            image={teacher.image}
            name={teacher.name}
            specialty={teacher.specialty || ''}
          />
        ))
      }
    </HorizontalCarousel>

    <!-- Scroll Indicators/Tabs -->
    <div class:list={YOGA_GURUS_STYLES.INDICATORS_CONTAINER}>
      {
        data.TEACHERS.map((_, index) => (
          <button
            aria-label={`Go to teacher ${index + 1}`}
            class:list={[`scroll-indicator`, `${YOGA_GURUS_STYLES.INDICATOR}`]}
            data-index={index}
          />
        ))
      }
    </div>
  </div>
</section>

<!-- Scroll Indicators Script -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const scrollContainer = document.getElementById('gurusContainer');
    const indicators = document.querySelectorAll('.scroll-indicator');

    if (scrollContainer && indicators.length > 0) {
      // Handle indicator clicks
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          const cardWidth =
            window.innerWidth < 768
              ? window.innerWidth
              : window.innerWidth < 1024
                ? window.innerWidth / 2
                : window.innerWidth / 3;

          scrollContainer.scrollTo({
            left: cardWidth * index,
            behavior: 'smooth',
          });
        });
      });

      // Update active indicator on scroll
      function updateActiveIndicator() {
        if (!scrollContainer) return;

        const scrollLeft = scrollContainer.scrollLeft;
        const cardWidth =
          window.innerWidth < 768
            ? window.innerWidth
            : window.innerWidth < 1024
              ? window.innerWidth / 2
              : window.innerWidth / 3;

        const activeIndex = Math.round(scrollLeft / cardWidth);

        indicators.forEach((indicator, index) => {
          if (index === activeIndex) {
            indicator.className =
              'scroll-indicator w-3 h-3 rounded-full bg-purple-600 scale-125 transition-all duration-300 hover:bg-purple-500 cursor-pointer';
          } else {
            indicator.className =
              'scroll-indicator w-3 h-3 rounded-full bg-purple-300 transition-all duration-300 hover:bg-purple-500 cursor-pointer';
          }
        });
      }

      // Listen for scroll events
      scrollContainer.addEventListener('scroll', updateActiveIndicator);

      // Initialize active indicator
      updateActiveIndicator();
    }
  });
</script>
