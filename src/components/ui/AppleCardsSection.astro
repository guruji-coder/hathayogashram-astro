---
interface Card {
  title: string;
  src: string;
  content: string;
}

interface Props {
  title?: string;
  subtitle?: string;
  cards?: Card[];
  backgroundColor?: string;
}

const {
  title = "Experience Our Yoga Journey",
  subtitle = "Discover the transformative power of yoga through our comprehensive programs",
  cards = [],
  backgroundColor = "bg-white"
} = Astro.props;
---

<section class={`py-16 ${backgroundColor}`}>
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="mb-16 text-center">
      <h2 class="mb-6 text-3xl font-bold text-purple-900 md:text-4xl">
        {title}
      </h2>

      <p class="mx-auto max-w-3xl text-lg text-gray-700">
        {subtitle}
      </p>
    </div>

    <!-- Apple Cards - Horizontal Scroll Layout -->
    <div class="relative">
      <div 
        id="appleCardsContainer"
        class="flex snap-x snap-mandatory gap-6 overflow-x-auto scroll-smooth pb-4"
      >
        {cards.map((card, index) => (
          <div class="w-[85%] md:w-[70%] lg:w-[45%] xl:w-[30%] flex-shrink-0 snap-start">
            <div class="group relative overflow-hidden rounded-2xl bg-white shadow-xl transition-all duration-500 hover:shadow-2xl hover:scale-105 h-full border border-gray-100">
              <!-- Card Image -->
              <div class="aspect-video overflow-hidden">
                <img
                  src={card.src}
                  alt={card.title}
                  class="h-full w-full object-cover transition-transform duration-700 group-hover:scale-110"
                  loading="lazy"
                />
              </div>
              
              <!-- Card Content -->
              <div class="p-6">
                <h3 class="mb-4 text-xl font-bold text-purple-900 group-hover:text-purple-700 transition-colors">
                  {card.title}
                </h3>
                
                <!-- Card Content HTML -->
                <div class="prose prose-sm max-w-none text-gray-700 line-clamp-6" set:html={card.content} />
                
                <!-- Expand Button -->
                <button 
                  class="expand-btn mt-4 text-purple-600 hover:text-purple-800 font-medium text-sm transition-colors flex items-center group/btn"
                  data-card-index={index}
                >
                  <span class="expand-text">Read More</span>
                  <svg class="ml-1 w-4 h-4 transition-transform group-hover/btn:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Scroll Indicators -->
      {cards.length > 1 && (
        <div class="flex justify-center mt-8 space-x-2">
          {cards.map((_, index) => (
            <button
              class="scroll-indicator w-3 h-3 rounded-full bg-purple-300 transition-all duration-300 hover:bg-purple-500 cursor-pointer"
              data-index={index}
              aria-label={`Go to card ${index + 1}`}
            ></button>
          ))}
        </div>
      )}
    </div>
  </div>
</section>

<!-- Interactive functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.getElementById('appleCardsContainer');
    const indicators = document.querySelectorAll('.scroll-indicator');
    const expandBtns = document.querySelectorAll('.expand-btn');
    
    // Handle scroll indicators
    if (scrollContainer && indicators.length > 0) {
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          const cardWidth = scrollContainer.scrollWidth / indicators.length;
          scrollContainer.scrollTo({
            left: cardWidth * index,
            behavior: 'smooth'
          });
        });
      });

      // Update active indicator on scroll
      function updateActiveIndicator() {
        if (!scrollContainer) return;
        
        const scrollLeft = scrollContainer.scrollLeft;
        const cardWidth = scrollContainer.scrollWidth / indicators.length;
        const activeIndex = Math.round(scrollLeft / cardWidth);
        
        indicators.forEach((indicator, index) => {
          if (index === activeIndex) {
            indicator.className = 'scroll-indicator w-3 h-3 rounded-full bg-purple-600 scale-125 transition-all duration-300 hover:bg-purple-500 cursor-pointer';
          } else {
            indicator.className = 'scroll-indicator w-3 h-3 rounded-full bg-purple-300 transition-all duration-300 hover:bg-purple-500 cursor-pointer';
          }
        });
      }

      scrollContainer.addEventListener('scroll', updateActiveIndicator);
      updateActiveIndicator();
    }
    
    // Handle expand/collapse functionality
    expandBtns.forEach((btn) => {
      btn.addEventListener('click', function(event) {
        const target = event.currentTarget as HTMLButtonElement;
        const cardIndex = target.getAttribute('data-card-index');
        const card = target.closest('.group');
        const content = card?.querySelector('.prose');
        const expandText = target.querySelector('.expand-text');
        
        if (content && expandText) {
          if (content.classList.contains('line-clamp-6')) {
            // Expand
            content.classList.remove('line-clamp-6');
            expandText.textContent = 'Read Less';
          } else {
            // Collapse
            content.classList.add('line-clamp-6');
            expandText.textContent = 'Read More';
          }
        }
      });
    });
  });
</script>

<style>
  /* Custom line-clamp for content truncation */
  .line-clamp-6 {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Smooth scrollbar styling */
  #appleCardsContainer {
    scrollbar-width: thin;
    scrollbar-color: #c084fc #f3f4f6;
  }
  
  #appleCardsContainer::-webkit-scrollbar {
    height: 6px;
  }
  
  #appleCardsContainer::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 3px;
  }
  
  #appleCardsContainer::-webkit-scrollbar-thumb {
    background: #c084fc;
    border-radius: 3px;
  }
  
  #appleCardsContainer::-webkit-scrollbar-thumb:hover {
    background: #a855f7;
  }
</style>
