---
import SectionHeader from '$components/ui/SectionHeader.astro';
import { ICON_IMAGES, YOGA_CAROUSEL_IMAGES } from '$constants/imageConstants';
import { CURRICULUM_IMAGE_SETS as TTC_CURRICULUM_IMAGES } from '$constants/TTC/200hour';
import OmListItem from '../../ui/OmListItem.astro';

export interface Props {
  curriculumData: {
    title: string;
    items: Array<{
      id: string;
      title: string;
      sections: Array<{
        title: string;
        description?: string;
        items: string[];
      }>;
    }>;
  };
}

const { curriculumData } = Astro.props;

/**
 * CHUNKED ARRAYS UTILITY FUNCTION - FLEX VERSION
 * ===============================================
 * Purpose: Splits a long array into smaller chunks with fixed flex layout
 * Use case: Create consistent visual blocks with images
 * 
 * @param arr - Array of items to be chunked
 * @param size - Number of items per chunk (default: 4)
 * @returns Array of arrays (chunks)
 */
function chunkArray(arr: string[], size: number = 4): string[][] {
  return arr.reduce((chunks, item, index) => {
    // Calculate which chunk this item belongs to
    const chunkIndex = Math.floor(index / size);
    
    // Create new chunk if it doesn't exist
    if (!chunks[chunkIndex]) {
      chunks[chunkIndex] = [];
    }
    
    // Add item to appropriate chunk
    chunks[chunkIndex].push(item);
    
    return chunks;
  }, [] as string[][]);
}

/**
 * GET CURRICULUM-SPECIFIC IMAGES
 * ==============================
 * Purpose: Return appropriate images based on section content
 * Strategy: Match section titles/ids to specific image sets
 * 
 * @param sectionTitle - Title of the curriculum section
 * @param itemIndex - Index of current curriculum item
 * @returns Array of contextual images
 */
function getCurriculumImages(sectionTitle: string, itemIndex: number) {
  const title = sectionTitle.toLowerCase();
  
  // Map section titles to image sets
  if (title.includes('asana') || title.includes('posture')) {
    return TTC_CURRICULUM_IMAGES.asana;
  } else if (title.includes('pranayama') || title.includes('breathing')) {
    return TTC_CURRICULUM_IMAGES.pranayama;
  } else if (title.includes('mudra')) {
    return TTC_CURRICULUM_IMAGES.mudras;
  } else if (title.includes('bandha')) {
    return TTC_CURRICULUM_IMAGES.bandhas;
  } else if (title.includes('shatkarma') || title.includes('cleansing')) {
    return TTC_CURRICULUM_IMAGES.shatkarma;
  } else if (title.includes('philosophy') || title.includes('theory')) {
    return TTC_CURRICULUM_IMAGES.philosophy;
  } else if (title.includes('anatomy') || title.includes('body')) {
    return TTC_CURRICULUM_IMAGES.anatomy;
  } else if (title.includes('teaching') || title.includes('methodology')) {
    return TTC_CURRICULUM_IMAGES.teaching;
  }
  
  // Fallback: Use general carousel images
  return YOGA_CAROUSEL_IMAGES.slice(0, 3);
}
---

<section class="py-16 bg-white" id="Curriculum">
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-primary mb-4">
        {curriculumData.title}
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-orange-400 to-orange-600 mx-auto"></div>
    </div>

    <SectionHeader title={curriculumData.title} />

    <!-- Curriculum Items -->
    <div class="max-w-5xl mx-auto space-y-4">
      {curriculumData.items.map((item) => (
        <div class="curriculum-item border border-gray-200 rounded-lg shadow-sm bg-white overflow-hidden">
          <!-- Header - Mobile: Button, Desktop: Static -->
          <div
            class="curriculum-header px-6 py-4 md:bg-primary cursor-pointer md:cursor-default"
            data-target={item.id}
          >
            <div class="flex items-center justify-between">
              <h3 class="text-lg md:text-xl font-semibold md:font-bold md:text-white">
                {item.title}
              </h3>
              <i class="curriculum-icon fas fa-plus text-gray-500 text-2xl md:hidden"></i>
            </div>
          </div>

          <!-- Content -->
          <div
            class="curriculum-content hidden md:block"
            id={item.id}
          >
            <div class="">
              {item.sections.map((section) => (
                <div class="mb-8 last:mb-0 my-5">
                  <h4 class="text-xl font-bold text-gray-800 mb-3 ml-6">
                    {section.title}
                  </h4>
                  {section.description && (
                    <p class="text-gray-600 mb-4 leading-relaxed ml-6">
                      {section.description}
                    </p>
                  )}
                  
                  {/*
                    FLEX LAYOUT WITH FIXED DIMENSIONS
                    =================================
                    
                    Structure:
                    - Fixed height containers for consistency
                    - Flex layout for responsive design
                    - Section-specific images
                    - Chunked content with visual breaks
                  */}
                  <div class="flex flex-col space-y-8">
                    {chunkArray(section.items, 4).map((chunk, chunkIndex) => {
                      // Get section-specific images
                      const sectionImages = getCurriculumImages(section.title, chunkIndex);
                      const currentImage = sectionImages[chunkIndex % sectionImages.length];
                      
                      return (
                        <div class="flex flex-col lg:flex-row gap-6 min-h-[400px]">
                          {/* Content Block - Fixed Width */}
                          <div class="flex-1 lg:w-2/3">
                            <div class="bg-gray-50 rounded-xl p-6 h-full flex flex-col justify-center">
                              <div class="space-y-3">
                                {chunk.map((listItem) => (
                                  <OmListItem text={listItem} />
                                ))}
                              </div>
                            </div>
                          </div>
                          
                          {/* Image Block - Fixed Width & Height */}
                          {chunkIndex < chunkArray(section.items, 4).length - 1 && currentImage && (
                            <div class="lg:w-1/3 flex-shrink-0">
                              <figure class="h-full min-h-[300px] lg:min-h-[400px]">
                                <div class="relative overflow-hidden rounded-xl shadow-lg h-full">
                                  <img 
                                    alt={currentImage.alt}
                                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                                    height="400"
                                    loading="lazy"
                                    src={currentImage.src}
                                    width="300"
                                  />
                                  {/* Image Overlay */}
                                  <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                                  
                                  {/* Image Caption Overlay */}
                                  <div class="absolute bottom-0 left-0 right-0 p-4 text-white">
                                    <p class="text-sm font-medium bg-black/50 rounded px-3 py-2 backdrop-blur-sm">
                                      {currentImage.description}
                                    </p>
                                  </div>
                                </div>
                              </figure>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              ))}
              
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  {/* 
    STRUCTURED DATA FOR SEO
    =======================
    Helps search engines understand the curriculum structure
    Improves rich snippets and course visibility
  */}
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Course",
      "name": "200 Hour Yoga Teacher Training Curriculum",
      "description": "Comprehensive curriculum covering all aspects of yoga teacher training including philosophy, asanas, pranayama, and teaching methodology",
      "provider": {
        "@type": "Organization",
        "name": "Hatha Yoga Ashram",
        "url": "https://hathayogashram.com"
      },
      "hasCourseInstance": {
        "@type": "CourseInstance",
        "courseMode": "https://schema.org/OfflineEventAttendanceMode",
        "courseWorkload": "PT200H",
        "location": {
          "@type": "Place",
          "name": "Rishikesh, India"
        }
      }
    }
  </script>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const headers = document.querySelectorAll('.curriculum-header');
    const isMobile = () => window.innerWidth < 768;

    headers.forEach(header => {
      header.addEventListener('click', () => {
        if (!isMobile()) return;

        const targetId = header.getAttribute('data-target');
        if (!targetId) return;

        const content = document.getElementById(targetId);
        const icon = header.querySelector('.curriculum-icon');
        const title = header.querySelector('h3');

        if (!content || !icon) return;

        const isOpen = !content.classList.contains('hidden');

        // Close all items
        document.querySelectorAll('.curriculum-content').forEach(c => c.classList.add('hidden'));
        document.querySelectorAll('.curriculum-icon').forEach(i => {
          i.classList.remove('fa-minus', 'text-white');
          i.classList.add('fa-plus', 'text-gray-500');
        });
        document.querySelectorAll('.curriculum-header').forEach(h => {
          h.classList.remove('bg-primary');
          const t = h.querySelector('h3');
          if (t) t.classList.remove('text-white');
        });

        // Toggle current item
        if (!isOpen) {
          content.classList.remove('hidden');
          icon.classList.remove('fa-plus', 'text-gray-500');
          icon.classList.add('fa-minus', 'text-white');
          header.classList.add('bg-primary');
          if (title) title.classList.add('text-white');
        }
      });
    });

    // Handle resize
    window.addEventListener('resize', () => {
      if (!isMobile()) {
        // Desktop: show all content
        document.querySelectorAll('.curriculum-content').forEach(c => c.classList.remove('hidden'));
      } else {
        // Mobile: hide all content
        document.querySelectorAll('.curriculum-content').forEach(c => c.classList.add('hidden'));
        document.querySelectorAll('.curriculum-header').forEach(h => {
          h.classList.remove('bg-primary');
          const t = h.querySelector('h3');
          if (t) t.classList.remove('text-white');
        });
        document.querySelectorAll('.curriculum-icon').forEach(i => {
          i.classList.remove('fa-minus', 'text-white');
          i.classList.add('fa-plus', 'text-gray-500');
        });
      }
    });
  });
</script>

<style>
  @media (max-width: 767px) {
    .curriculum-header {
      transition: all 0.3s ease;
    }

    .curriculum-header:hover {
      background-color: #f9fafb;
    }

    .curriculum-header.bg-primary:hover {
      background-color: #e501f0;
    }
  }

  .curriculum-content {
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from { opacity: 0; max-height: 0; }
    to { opacity: 1; max-height: 2000px; }
  }
</style>
