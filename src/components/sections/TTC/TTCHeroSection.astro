---
interface Props {
  images: string[];
  title: string;
  details: Array<{ label: string; value: string }>;
  fees: {
    single: { amount: string; description: string };
    double: { amount: string; description: string };
    withoutStay: { amount: string; description: string };
  };
  contactRoute: string;
}

const { images, title, details, fees, contactRoute } = Astro.props;
const [titleLine1, titleLine2] = title.split("\n");
import Button from '$components/ui/Button.astro';
---

<div class="block md:flex min-h-[50vh] md:min-h-screen w-full flex-col md:flex-row ">
  <!-- Carousel -->
  <div id="carousel-container" class="relative w-full bg-red-400 h-[300px] flex-none md:h-screen md:w-2/3 rounded-t-2xl md:rounded-l-2xl overflow-hidden">
    <img
      id="carousel-image"
      src={images[0]}
      alt="Training course image"
      class="h-full w-full object-cover"
    />
    <button id="prev-btn" class="absolute bottom-2 left-2 md:left-auto md:right-10 z-10 p-2 rounded-full">
      <i class="fas fa-chevron-left text-white text-lg md:text-xl"></i>
    </button>
    <button id="next-btn" class="absolute bottom-2 right-2 md:right-2 z-10 p-2 rounded-full">
      <i class="fas fa-chevron-right text-white text-lg md:text-xl"></i>
    </button>
  </div>

  <!-- Info Panel -->
  <div class="flex w-full items-center h-auto md:h-screen md:w-1/3 rounded-b-2xl md:rounded-r-2xl overflow-hidden">
    <div class="space-y-2 md:space-y-3 bg-white p-3 md:p-4 font-space shadow-lg h-full w-full">
      <h2 class="text-lg font-bold leading-tight text-primary md:text-lg lg:text-2xl text-center md:text-left">
        {titleLine1}<br />{titleLine2}
      </h2>
      <div class="space-y-1 md:space-y-2">
        {details.map(({ label, value }, idx) => (
          <div class={`flex justify-between text-xs md:text-sm ${idx === 0 ? 'border-b border-gray-700' : 'border-b border-gray-200'} pb-1`}>
            <div class="text-orange-500">
              <span class="text-primary-600">â—†</span>
              <span class="font-semibold">{label}:</span>
            </div>
            <span>{value}</span>
          </div>
        ))}
      </div>

      <!-- Fees -->
      <div>
        <h3 class="mb-1 md:mb-2 text-base md:text-lg font-bold text-primary">Course Fee:</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-1 md:gap-2">
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg md:text-xl font-bold text-primary">{fees.single.amount}</div>
            <div class="text-xs text-primary">{fees.single.description}</div>
          </div>
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg md:text-xl font-bold text-primary">{fees.double.amount}</div>
            <div class="text-xs text-primary">{fees.double.description}</div>
          </div>
        </div>
      </div>

      <div>
        <h3 class="mb-1 md:mb-2 text-base md:text-lg font-bold text-primary">Course Fee Without Stay:</h3>
        <div class="grid grid-cols-1 gap-1 md:gap-2">
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg md:text-xl font-bold text-primary">{fees.withoutStay.amount}</div>
            <div class="text-xs text-primary">{fees.withoutStay.description}</div>
          </div>
        </div>
      </div>

      <div class="text-center w-full pt-1 md:pt-2">
        <Button href={contactRoute} class="cursor-pointer w-full rounded-md bg-primary px-4 py-2 text-sm text-white hover:bg-primary/90 transition-colors ">
          Book Now
        </Button>
      </div>
    </div>
  </div>

</div>



<!-- Carousel Script -->
<script define:vars={{ images }} defer>
  let i = 0;
  const img = document.getElementById('carousel-image');
  const prev = document.getElementById('prev-btn');
  const next = document.getElementById('next-btn');
  const container = document.getElementById('carousel-container');
  let t;

  function update() { img.src = images[i]; }
  function start() { t = setInterval(() => { i = (i + 1) % images.length; update(); }, 2500); }
  function stop() { clearInterval(t); }

  if (img && prev && next && container) {
    update();
    start();
    container.addEventListener('mouseenter', stop);
    container.addEventListener('mouseleave', start);
    prev.addEventListener('click', () => { stop(); i = (i - 1 + images.length) % images.length; update(); start(); });
    next.addEventListener('click', () => { stop(); i = (i + 1) % images.length; update(); start(); });
  }
</script>
