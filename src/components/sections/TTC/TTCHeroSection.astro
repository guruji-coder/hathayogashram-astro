---
import type { ImageInput } from '../../../types/images';

interface Props {
  images: ImageInput[];
  title: string;
  details: Array<{ label: string; value: string }>;
  fees: {
    single: { amount: string; description: string };
    double: { amount: string; description: string };
    withoutStay: { amount: string; description: string };
  };
  contactRoute: string;
}

const { images, title, details, fees, contactRoute } = Astro.props;

// Helper function to get image source
const getImageSrc = (img: ImageInput): string => {
  return img.src;
};

// Helper function to get image alt
const getImageAlt = (img: ImageInput): string => {
  return img.alt;
};

// Helper function to get image description
const getImageDescription = (img: ImageInput): string => {
  return img.description;
};

const imageSources = images.map(getImageSrc);
console.log('Images in TTCHeroSection:', imageSources);

const [titleLine1, titleLine2] = title.split('\n');
import Button from '$components/ui/Button.astro';
---

<div class="block min-h-[50vh] w-full flex-col md:flex md:min-h-screen md:flex-row">
  <!-- Carousel -->
  <div
    class="relative h-full   w-full flex-none overflow-hidden   md:h-screen md:w-2/3"
    id="carousel-container"
  >

      <div class="grid grid-cols-2 grid-rows-2 h-full w-full gap-5 p-5" id="carousel-container-grid">
        <img
          alt={getImageAlt(images[0])}
          class="h-full w-full object-cover object-center rounded-lg"
          decoding="async"
          height="300"
          id="img-0"
          loading="eager"
          src={getImageSrc(images[0])}
          width="400"
        />
        <img
          alt={getImageAlt(images[1] || images[0])}
          class="h-full w-full object-cover object-center rounded-lg"
          decoding="async"
          height="300"
          id="img-1"
          loading="lazy"
          src={getImageSrc(images[1] || images[0])}
          width="400"
        />
        <img
          alt={getImageAlt(images[2] || images[0])}
          class="h-full w-full object-cover object-center rounded-lg"
          decoding="async"
          height="300"
          id="img-2"
          loading="lazy"
          src={getImageSrc(images[2] || images[0])}
          width="400"
        />
        <img
          alt={getImageAlt(images[3] || images[0])}
          class="h-full w-full object-cover object-center rounded-lg"
          decoding="async"
          height="300"
          id="img-3"
          loading="lazy"
          src={getImageSrc(images[3] || images[0])}
          width="400"
        />
      </div>
    <button
      class="absolute bottom-2 left-2 z-10 rounded-full p-2 md:left-auto md:right-10"
      id="prev-btn"
    >
      <i class="fas fa-chevron-left text-lg text-white md:text-xl"></i>
    </button>
    <button class="absolute bottom-2 right-2 z-10 rounded-full p-2 md:right-2" id="next-btn">
      <i class="fas fa-chevron-right text-lg text-white md:text-xl"></i>
    </button>
  </div>

  <!-- Info Panel -->
  <div
    class="flex h-auto w-full items-center overflow-hidden rounded-b-2xl md:h-screen md:w-1/3 md:rounded-r-2xl"
  >
    <div class="font-inter h-full w-full space-y-2 bg-white p-3 shadow-lg md:space-y-3 md:p-4">
      <h2
        class="mt-2 text-center text-xl font-bold leading-tight text-purple-600 md:text-left md:text-2xl lg:mt-5 lg:text-3xl"
      >
        <span class="text-4xl">{titleLine1}</span>
        <br />{titleLine2}
      </h2>
      <div class="space-y-1 pt-0 md:space-y-2 lg:pt-10">
        {
          details.map(({ label, value }, idx) => (
            <div
              class:list={[
                `flex justify-between whitespace-nowrap font-space text-lg font-black md:text-base`,
                `pb-1`,
                { 'border-b border-gray-700': idx === 0, 'border-b border-gray-200': idx !== 0 },
              ]}
            >
              <div class="text-orange-600">
                <span>â—†</span>
                <span class="">{label}:</span>
              </div>
              <span>{value}</span>
            </div>
          ))
        }
      </div>

      <!-- Fees -->
      <div>
        <h3 class="mb-1 text-center text-base font-bold text-primary lg:mb-2 lg:text-xl">
          Course Fee:
        </h3>
        <div class="grid grid-cols-1 gap-1 md:grid-cols-2 md:gap-2">
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg font-bold text-primary lg:text-2xl">
              {fees.single.amount}
            </div>
            <div class="text-xs text-primary lg:text-sm">{fees.single.description}</div>
          </div>
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg font-bold text-primary lg:text-2xl">
              {fees.double.amount}
            </div>
            <div class="text-xs text-primary lg:text-sm">{fees.double.description}</div>
          </div>
        </div>
        <div>
        <h3 class="mb-1 text-center text-base font-bold text-primary lg:mb-2 lg:text-xl">
          Course Fee Without Stay:
        </h3>
        <div class="grid grid-cols-1 md:place-items-center">
          <div class="rounded-lg border border-primary bg-primary/10 p-1 md:p-2">
            <div class="text-lg font-bold text-primary lg:text-2xl">
              {fees.withoutStay.amount}
            </div>
            <div class="text-xs text-primary lg:text-sm">
              {fees.withoutStay.description}
            </div>
          </div>
        </div>
      </div>
      </div>

      

      <div class="pt-1 text-center md:pt-2">
        <Button
          class="cursor-pointer rounded-md bg-gradient-to-r from-primary to-purple-600 px-4 py-2 text-3xl font-light text-white transition-colors hover:from-purple-600 hover:to-purple-700"
          href={contactRoute}
        >
          Book Now
        </Button>
      </div>
    </div>
  </div>
</div>

<!-- Carousel Script -->
<script defer define:vars={{ imageSources }}>
  let currentIndex = 0;
  const img0 = document.getElementById('img-0');
  const img1 = document.getElementById('img-1');
  const img2 = document.getElementById('img-2');
  const img3 = document.getElementById('img-3');
  const prev = document.getElementById('prev-btn');
  const next = document.getElementById('next-btn');
  const container = document.getElementById('carousel-container');
  let autoSlideInterval;

  function updateGrid() {
    // Show 4 images in 2x2 grid starting from currentIndex
    if (img0) img0.src = imageSources[currentIndex % imageSources.length];
    if (img1) img1.src = imageSources[(currentIndex + 1) % imageSources.length];
    if (img2) img2.src = imageSources[(currentIndex + 2) % imageSources.length];
    if (img3) img3.src = imageSources[(currentIndex + 3) % imageSources.length];
  }

  function startAutoSlide() {
    autoSlideInterval = setInterval(() => {
      currentIndex = (currentIndex + 4) % imageSources.length;
      updateGrid();
    }, 2500); // Change every 2.5 seconds
  }

  function stopAutoSlide() {
    clearInterval(autoSlideInterval);
  }

  function goNext() {
    stopAutoSlide();
    currentIndex = (currentIndex + 4) % imageSources.length;
    updateGrid();
    startAutoSlide();
  }

  function goPrev() {
    stopAutoSlide();
    currentIndex = (currentIndex - 4 + imageSources.length) % imageSources.length;
    updateGrid();
    startAutoSlide();
  }

  // Initialize
  if (imageSources.length >= 4) {
    updateGrid();
    startAutoSlide();
    
    
    if (prev) prev.addEventListener('click', goPrev);
    if (next) next.addEventListener('click', goNext);
  }
</script>

